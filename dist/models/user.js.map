{"version":3,"file":"user.js","sourceRoot":"","sources":["../../src/models/user.ts"],"names":[],"mappings":"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","sourcesContent":["import { attribute, table } from \"@aws/dynamodb-data-mapper-annotations\"\nimport { embed, DataMapper } from \"@aws/dynamodb-data-mapper\"\nimport { Job } from \"./job\"\nimport DynamoDB = require('aws-sdk/clients/dynamodb')\nconst client = new DynamoDB({region: 'eu-west-1'})\nconst mapper = new DataMapper({client})\n\n/**\n * Class for Skills\n */\nexport class Skill {\n    @attribute()\n    title?: string\n\n    @attribute()\n    description?: string\n}\n\n/**\n * Class for Education Items\n */\nexport class EducationItem {\n    @attribute()\n    degreeTitle?: string\n\n    @attribute()\n    startYear?: string\n\n    @attribute()\n    endYear?: string\n\n    @attribute()\n    collegeName?: string\n\n    @attribute()\n    grade?: string\n\n    @attribute()\n    description?: string\n}\n\n/**\n * Class for Social Links\n */\nexport class SocialLink {\n    @attribute()\n    name?: string\n\n    @attribute()\n    linkUrl?: string\n}\n\n/**\n* Model class for User\n* @extends AWS-SDK\n*/\n@table('users')\nexport class User{\n\n    @attribute()\n    email?: string\n\n    @attribute()\n    fName?: string\n\n    @attribute()\n    lName?: string\n\n    @attribute()\n    dob?: Date\n\n    @attribute()\n    summary?: string\n\n    @attribute({memberType: embed(Skill)})\n    skills?: Array<Skill>\n\n    @attribute({memberType: embed(EducationItem)})\n    educationItems?: Array<EducationItem>\n\n    @attribute({memberType: embed(Job)})\n    activeJobs?: Array<Job>\n\n    @attribute({memberType: embed(Job)})\n    jobHistory?: Array<Job>\n\n    @attribute()\n    avatarUrl?: string\n\n    @attribute()\n    backgroundUrl?: string\n\n    @attribute({memberType: embed(SocialLink)})\n    socialLinks?: Array<SocialLink>\n\n    @attribute()\n    tagline?: string\n\n    @attribute({memberType: embed(User)})\n    contacts?: Array<User>\n\n    constructor(email?: string, fName?: string, lName?: string, dob?: Date, summary?: string, skills?: Skill[], educationItems?: EducationItem[], activeJobs?: Job[], jobHistory?: Job[], avatarUrl?: string, backgroundUrl?: string, socialLinks?: SocialLink[], tagline?: string, contacts?: User[]) {\n        this.email = email\n        this.fName = fName\n        this.lName = lName\n        this.dob = dob\n        this.summary = summary\n        this.skills = skills\n        this.educationItems = educationItems\n        this.activeJobs = activeJobs\n        this.jobHistory = jobHistory\n        this.avatarUrl = avatarUrl\n        this.backgroundUrl = backgroundUrl\n        this.socialLinks = socialLinks\n        this.tagline = tagline\n        this.contacts = contacts\n    }\n    /**\n    * Default method for finding all Users\n    * @param this - context\n    */\n    async findAllUsers(this: User) {\n        let userArray = Array<User>()\n        for await (const user of mapper.scan({valueConstructor: User})){\n            userArray.push(user)\n        }\n        return userArray\n    }\n\n    // // Find a user based on the name given\n    // static async findUserByName(this: ModelType<User>, name: string) {\n    //     return await this.findOne({ name: name })\n    // }\n\n    // // Find a user based on the ID given\n    // static async findUserById(this: ModelType<User>, id: string) {\n    //     let o_id = new ObjectId(id)\n    //     return await this.findOne({ _id: o_id })\n    // }\n\n    // // Query the user collection\n    // static async findUsersByQuery(this: ModelType<User>, query: object) {\n    //     return await this.find(query)\n    // }\n\n    // // Delete a user based on the ID given\n    // static async deleteUserById(this: ModelType<User>, id: string) {\n    //     let o_id = new ObjectId(id)\n    //     return await this.deleteOne({ _id: o_id })\n    // }\n\n}\nexport const UserModel = new User()\n\n"]}
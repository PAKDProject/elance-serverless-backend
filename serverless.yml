# serverless.yml

service: my-express-application

custom:
  userTable: 'users-table-${self:provider.stage}'
  jobTable: 'jobs-table-${self:provider.stage}'
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      inMemory: true
      seed: true
      convertEmptyValues: true
    seed:
      test:
        sources:
          - table: 'users-table-${self:provider.stage}'
            sources: [test-data/user-table-dev.json]

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["JobsDynamoDBTable", "Arn" ] }
  environment:
    USERS_TABLE: ${self:custom.userTable}
    JOBS_TABLE: ${self:custom.jobTable}

package:
  exclude:
    - src/**
    - .vscode
    - tsconfig.json
    - nodemon.json
  include: 
    - dist/**
    - package.json
    - package-lock.json
    - node_modules/**

functions:
  app:
    handler: dist/serverless.handler
    events:
      - http: 'ANY {proxy+}'

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: lName
            AttributeType: S
          - AttributeName: fName
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        - IndexName: fNameIndex
          KeySchema:
          - AttributeName: fName
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: lNameIndex
          KeySchema:
          - AttributeName: lName
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        TableName: ${self:custom.userTable}
    JobsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: title
            AttributeType: S
          - AttributeName: payment
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        - IndexName: titleIndex
          KeySchema:
          - AttributeName: title
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: paymentIndex
          KeySchema:
          - AttributeName: payment
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        TableName: ${self:custom.jobTable}

plugins:
  - serverless-dynamodb-local
  - serverless-offline

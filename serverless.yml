# serverless.yml

service: elance-serverless-backend

custom:
  appTable: 'app-table-${self:provider.stage}'
  userTable: 'users-table-${self:provider.stage}'
  jobTable: 'jobs-table-${self:provider.stage}'
  tokensTable: 'tokens-table-${self:provider.stage}'
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      migrate: true
      inMemory: true
      seed: true
      convertEmptyValues: true
    seed:
      test:
        sources:
          - table: 'users-table-${self:provider.stage}'
            sources: [test-data/users-table-dev.json]
          - table: 'jobs-table-${self:provider.stage}'
            sources: [test-data/jobs-table-dev.json]            

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["AppDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["JobsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["TokensDynamoDBTable", "Arn" ] }
  environment:
    APP_TABLE: ${self:custom.appTable}
    USERS_TABLE: ${self:custom.userTable}
    JOBS_TABLE: ${self:custom.jobTable}
    TOKENS_TABLE: ${self:custom.tokensTable}

package:
  exclude:
    - src/**
    - tsconfig.json
    - nodemon.json
    - test-data/**
    - .dynamodb/**
    - .circleci/**
    - README.md

functions:
  app:
    handler: dist/serverless.handler
    events:
      - http: 'ANY {proxy+}'

resources:
  Resources:
    AppDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: jobId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: userJobIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        LocalSecondaryIndexes:
          # - IndexName: userIndex
          #   KeySchema:
          #     - AttributeName: id
          #       KeyType: HASH
          #     - AttributeName: userId
          #       KeyType: RANGE
          #   Projection:
          #     NonKeyAttributes:
          #       - "userEmail"
          #       - "userFName"
          #       - "userLName"
          #       - "userPhone"
          #       - "userDOB"
          #       - "userSummary"
          #       - "userSkills"
          #       - "userEducationItems"
          #       - "userActiveJobs"
          #       - "userJobHistory"
          #       - "userAvatarUrl"
          #       - "userBackgroundUrl"
          #       - "userSocialLinks"
          #       - "userTagline"
          #       - "userContacts"
          #     ProjectionType: INCLUDE
          - IndexName: jobIndex
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: jobId
                KeyType: RANGE
            Projection:
              NonKeyAttributes:
                - "jobTitle"
                - "jobEmployer"
                - "jobDescription"
                - "jobDatePosted"
                - "jobDateAccepted"
                - "jobIsAccepted"
                - "jobPayment"
                - "jobProgress"
              ProjectionType: INCLUDE
        TableName: ${self:custom.appTable}
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: lName
            AttributeType: S
          - AttributeName: fName
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        - IndexName: fNameIndex
          KeySchema:
          - AttributeName: fName
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: lNameIndex
          KeySchema:
          - AttributeName: lName
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        TableName: ${self:custom.userTable}
    JobsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: title
            AttributeType: S
          - AttributeName: payment
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        - IndexName: titleIndex
          KeySchema:
          - AttributeName: title
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: paymentIndex
          KeySchema:
          - AttributeName: payment
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        TableName: ${self:custom.jobTable}
    TokensDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tokensTable}

plugins:
  - serverless-dynamodb-local
  - serverless-offline
